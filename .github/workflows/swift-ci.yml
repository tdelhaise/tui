name: Swift CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: swift-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14]
    env:
      SWIFT_MODULE_CACHE_PATH: ${{ github.workspace }}/.swift-module-cache
      CLANG_MODULE_CACHE_PATH: ${{ github.workspace }}/.clang-module-cache
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libncursesw5-dev libpython3-dev

      - name: Install Swift development toolchain
        shell: bash
        run: |
          set -euxo pipefail
          CHANNEL=development
          if [ "$RUNNER_OS" = "macOS" ]; then
            PLATFORM=xcode
          else
            PLATFORM=ubuntu24.04
          fi

          META_FILE=$(mktemp)
          curl -sSL "https://download.swift.org/${CHANNEL}/${PLATFORM}/latest-build.yml" -o "$META_FILE"

          DOWNLOAD=$(awk -F': *' '/^download:/ {print $2; exit}' "$META_FILE")
          DOWNLOAD_DIR=$(awk -F': *' '/^download_dir:/ {print $2; exit}' "$META_FILE")
          if [ -z "$DOWNLOAD_DIR" ]; then
            DOWNLOAD_DIR=$(awk -F': *' '/^download_directory:/ {print $2; exit}' "$META_FILE")
          fi
          URL=$(awk -F': *' '/^download_url:/ {print $2; exit}' "$META_FILE")

          if [ -z "$DOWNLOAD" ]; then
            echo "Failed to locate Swift snapshot download name" >&2
            exit 1
          fi

          if [ -z "$DOWNLOAD_DIR" ]; then
            if [ "$RUNNER_OS" = "macOS" ]; then
              BASE_WITH_PLATFORM=${DOWNLOAD%.pkg}
              DOWNLOAD_DIR=${BASE_WITH_PLATFORM%-osx}
            else
              BASE_WITH_PLATFORM=${DOWNLOAD%.tar.gz}
              DOWNLOAD_DIR=${BASE_WITH_PLATFORM%-${PLATFORM}}
            fi
          fi

          if [ -z "$DOWNLOAD_DIR" ]; then
            echo "Failed to determine Swift snapshot directory" >&2
            exit 1
          fi

          if [ -z "$URL" ]; then
            URL="https://download.swift.org/${CHANNEL}/${PLATFORM}/${DOWNLOAD_DIR}/${DOWNLOAD}"
          elif [[ "$URL" != http* ]]; then
            URL="https://download.swift.org${URL}"
          fi

          echo "Resolved Swift snapshot: $DOWNLOAD (dir: $DOWNLOAD_DIR)"

          if [ "$RUNNER_OS" = "macOS" ]; then
            curl -sSL "$URL" -o swift.pkg
            sudo installer -pkg swift.pkg -target /
            TOOLCHAIN_ID=${DOWNLOAD%-osx.pkg}
            TOOLCHAIN_ID=${TOOLCHAIN_ID%.pkg}
            TOOLCHAIN_PATH="/Library/Developer/Toolchains/${TOOLCHAIN_ID}.xctoolchain/usr/bin"
            echo "${TOOLCHAIN_PATH}" >> "$GITHUB_PATH"
            echo "TOOLCHAINS=swift" >> "$GITHUB_ENV"
          else
            curl -sSL "$URL" -o swift.tar.gz
            tar -xzf swift.tar.gz
            SNAPSHOT_DIR=${DOWNLOAD%.tar.gz}
            echo "${PWD}/${SNAPSHOT_DIR}/usr/bin" >> "$GITHUB_PATH"
            if [ -n "${LD_LIBRARY_PATH:-}" ]; then
              echo "LD_LIBRARY_PATH=${PWD}/${SNAPSHOT_DIR}/usr/lib:${LD_LIBRARY_PATH}" >> "$GITHUB_ENV"
            else
              echo "LD_LIBRARY_PATH=${PWD}/${SNAPSHOT_DIR}/usr/lib" >> "$GITHUB_ENV"
            fi
          fi

          mkdir -p "$SWIFT_MODULE_CACHE_PATH" "$CLANG_MODULE_CACHE_PATH"

      - name: Show Swift version
        run: swift --version

      - name: Build
        run: swift build

      - name: Test
        run: swift test
