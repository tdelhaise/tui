name: Swift CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: swift-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14]
    env:
      SWIFT_MODULE_CACHE_PATH: ${{ github.workspace }}/.swift-module-cache
      CLANG_MODULE_CACHE_PATH: ${{ github.workspace }}/.clang-module-cache
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libncursesw5-dev libpython3-dev

      - name: Install Swift development toolchain
        shell: bash
        env:
          CHANNEL: development
        run: |
          set -euxo pipefail
          if [ "$RUNNER_OS" = "macOS" ]; then
            PLATFORM=xcode
          else
            PLATFORM=ubuntu24.04
          fi

          META_FILE=$(mktemp)
          curl -sSL "https://download.swift.org/${CHANNEL}/${PLATFORM}/latest-build.yml" -o "$META_FILE"

          python3 - <<'PY' "$META_FILE" "$RUNNER_OS" "$CHANNEL" "$PLATFORM" \
            "$SWIFT_MODULE_CACHE_PATH" "$CLANG_MODULE_CACHE_PATH" "$GITHUB_PATH" "$GITHUB_ENV" "$PWD"
          import os
          import subprocess
          import sys
          import urllib.parse

          import yaml


          def first_present(data, keys):
              for key in keys:
                  value = data.get(key)
                  if value:
                      return value
              return None


          meta_path, runner_os, channel, platform, swift_cache, clang_cache, github_path, github_env, cwd = sys.argv[1:]

          with open(meta_path, "r", encoding="utf-8") as handle:
              meta = yaml.safe_load(handle)

          download = first_present(meta, ["download", "file", "filename"])
          if not download:
              raise SystemExit("Failed to locate Swift snapshot download name")

          download_dir = first_present(meta, ["download_dir", "download_directory", "dir"])
          if not download_dir:
              if runner_os == "macOS":
                  base = download.removesuffix(".pkg")
                  download_dir = base.removesuffix("-osx")
              else:
                  base = download.removesuffix(".tar.gz")
                  download_dir = base.removesuffix(f"-{platform}")

          if not download_dir:
              raise SystemExit("Failed to determine Swift snapshot directory")

          url = first_present(meta, ["download_url", "url"])
          if not url:
              url = f"https://download.swift.org/{channel}/{platform}/{download_dir}/{download}"
          elif not urllib.parse.urlparse(url).scheme:
              url = f"https://download.swift.org{url}"

          print(f"Resolved Swift snapshot: {download} (dir: {download_dir})")

          os.makedirs(swift_cache, exist_ok=True)
          os.makedirs(clang_cache, exist_ok=True)

          if runner_os == "macOS":
              subprocess.run(["curl", "-sSL", url, "-o", "swift.pkg"], check=True)
              subprocess.run(["sudo", "installer", "-pkg", "swift.pkg", "-target", "/"], check=True)
              toolchain_id = download.removesuffix("-osx.pkg").removesuffix(".pkg")
              toolchain_path = f"/Library/Developer/Toolchains/{toolchain_id}.xctoolchain/usr/bin"
              with open(github_path, "a", encoding="utf-8") as handle:
                  handle.write(f"{toolchain_path}\n")
              with open(github_env, "a", encoding="utf-8") as handle:
                  handle.write("TOOLCHAINS=swift\n")
          else:
              subprocess.run(["curl", "-sSL", url, "-o", "swift.tar.gz"], check=True)
              subprocess.run(["tar", "-xzf", "swift.tar.gz"], check=True)
              snapshot_dir = download.removesuffix(".tar.gz")
              bin_path = os.path.join(cwd, snapshot_dir, "usr", "bin")
              lib_path = os.path.join(cwd, snapshot_dir, "usr", "lib")
              with open(github_path, "a", encoding="utf-8") as handle:
                  handle.write(f"{bin_path}\n")
              ld_library_path = os.environ.get("LD_LIBRARY_PATH", "")
              if ld_library_path:
                  value = f"LD_LIBRARY_PATH={lib_path}:{ld_library_path}\n"
              else:
                  value = f"LD_LIBRARY_PATH={lib_path}\n"
              with open(github_env, "a", encoding="utf-8") as handle:
                  handle.write(value)
PY

      - name: Show Swift version
        run: swift --version

      - name: Build
        run: swift build

      - name: Test
        run: swift test
